@page "/"
@page "/{Organization}/{Name}"

@using YouHaveIssues.Data
@using Humanizer
@inject IssuesByRepository IssuesByRepository
@inject KustoContextFactory KustoContextFactory

@if (Organization == null || Name == null)
{
    <p>Pick one of the repositories on the left</p>
}
else if (Repository == null)
{
    <h1>Issue counts for @Organization/@Name</h1>
    <em>Loading...</em>
}
else if (Repository.Exception != null)
{
    <h1>There was an error fetching @Organization/@Name</h1>
    <pre>@Repository.Exception.ToString()</pre>
}
else
{
    <h1>Issue counts for @Organization/@Name</h1>

    <div class="card-deck">
        <div class="row flex-nowrap" style="margin-bottom: 10px;">
            <div class="card">
                <div class="card-body"></div>
            </div>

            @foreach (var m in Repository.Milestones)
            {
                <div class="card bg-dark text-white">
                    <div class="card-body"><h5 class="card-title text-center">@m.Name</h5></div>
                </div>
            }
        </div>
        <div class="w-100"></div>

        <div class="row flex-nowrap" style="margin-bottom: 10px;">
            <div class="card bg-dark text-white">
                <div class="card-body"><h5 class="card-title text-center">All</h5></div>
            </div>
            @foreach (var m in Repository.Milestones)
            {
                <div class="card @BackgroundFor(m.TotalCount)">
                    <div class="card-body"><a href=@LinkFor(Repository, m) target="_blank"><h5 class="card-title text-center">@m.TotalCount</h5></a></div>
                </div>
            }

        </div>
        <div class="w-100"></div>


        @foreach (var a in Repository.AllAreas)
        {
            <div class="row flex-nowrap" style="margin-bottom: 10px;">
                <div class="card bg-dark text-white">
                    <div class="card-body"><h5 class="card-title text-center">@AreaName(a)</h5></div>
                </div>

                @foreach (var m in Repository.Milestones)
                {
                    <div class="card @BackgroundFor(m, a)">
                        <div class="card-body"><a href=@LinkFor(Repository, m, a) target="_blank"><h5 class="card-title text-center">@(m.Areas.TryGetValue(a, out var area) ? area.Count : 0)</h5></a></div>
                    </div>
                }
            </div>
            <div class="w-100"></div>

        }
    </div>

    <p>
        <em>
            Refreshed @@ @Repository.RefreshTime.ToLocalTime().ToString("t") | @GetBuildInfo()
        </em>
    </p>
}

@code {

    [Parameter] public string? Organization { get; set; }

    [Parameter] public string? Name { get; set; }

    protected Repository? Repository { get; private set; }

    protected override async Task OnParametersSetAsync()
    {
        Repository = null;
        if (Organization != null && Name != null)
        {
            var context = await KustoContextFactory.CreateContextAsync();
            Repository = await IssuesByRepository.GetRepository(context, Organization, Name);
        }
    }

    private static string AreaName(string name)
    {
        return name.StartsWith("area-")
            ? name.Substring("area-".Length)
            : name.StartsWith("area: ")
                ? name.Substring("area: ".Length)
                : name;
    }

    private static string? BackgroundFor(Milestone milestone, string areaName)
    {
        if (!milestone.Areas.TryGetValue(areaName, out var query))
        {
            return "bg-success";
        }

        return null;
    }

    private static string? BackgroundFor(int count)
    {
        return count == 0
            ? "bg-success"
            : null;
    }

    private static string LinkFor(Repository repository, Milestone milestone)
    {
        var m = milestone.Name == IssuesByRepository.NoMilestone
            ? $"no%3Amilestone"
            : $"milestone%3A{Escape(milestone.Name)}";
        return $"https://github.com/{repository.Organization}/{repository.Name}/issues?q=is%3Aopen+is%3Aissue+{m}";
    }

    private static string LinkFor(Repository repository, Milestone milestone, string areaName)
    {
        var a = areaName == IssuesByRepository.NoArea
            ? $"-label%3A{string.Join("+-label%3A", repository.AllAreas.Except(new[] { IssuesByRepository.NoArea }).Select(a => Escape(a)))}"
            : $"label%3A{areaName}";
        return $"{LinkFor(repository, milestone)}+{a}";
    }

    private static string Escape(string s)
    {
        return s.Contains(' ')
            ? $"\"{s.Replace(' ', '+')}\""
            : s;
    }

    private static string GetBuildInfo()
    {
        if (Program.SourceVersion == null)
        {
            return "Local build";
        }

        var branch = Program.SourceBranch ?? "unknown";

        if (branch.StartsWith("refs/heads/"))
            branch = branch.Substring("refs/heads/".Length);

        var sha = Program.SourceVersion?.Substring(0, 6);
        return $"Built for branch {branch}@{sha}";
    }
}
