@using IssueDashboard.Data
@inject IssuesByRepository IssuesByRepository

@if (Repository == null)
{
    <em>Loading...</em>
}
else if (Repository.Exception != null)
{
    <h1>There was an error fetching this repository:</h1>
    <p>@Repository.Exception.ToString()</p>
}
else
{
    <div class="card-deck">
        <div class="row flex-nowrap" style="margin-bottom: 10px;">
            <div class="card">
                <div class="card-body"></div>
            </div>

            <div class="card bg-dark text-white">
                <div class="card-body"><h5 class="card-title text-center">All</h5></div>
            </div>


            @foreach (var a in Repository.AllAreas)
            {
                <div class="card bg-dark text-white">
                    <div class="card-body"><h5 class="card-title text-center">@AreaName(a)</h5></div>
                </div>
            }
        </div>

        @foreach (var m in Repository.Milestones)
        {
            <div class="row flex-nowrap" style="margin-bottom: 10px;">
                <div class="card bg-dark text-white">
                    <div class="card-body"><h5 class="card-title text-center">@m.Name</h5></div>
                </div>
                <div class="card @BackgroundFor(m.TotalCount)">
                    <div class="card-body"><a href=@LinkFor(m) target="_blank"><h5 class="card-title text-center">@m.TotalCount</h5></a></div>
                </div>
                @foreach (var a in Repository.AllAreas)
                {
                    <div class="card @BackgroundFor(m, a)">
                        <div class="card-body"><a href=@LinkFor(m, a) target="_blank"><h5 class="card-title text-center">@(m.Areas.TryGetValue(a, out var area) ? area.Count : 0)</h5></a></div>
                    </div>
                }

            </div>
        }
    </div>
}

@code {

    [Parameter] public string Organization { get; set; }

    [Parameter] public string Name { get; set; }

    protected Repository Repository { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        Repository = await IssuesByRepository.GetRepository(Organization, Name);
    }

    private string AreaName(string name)
    {
        return name.StartsWith("area-")
            ? name.Substring("area-".Length)
            : name;
    }

    private string BackgroundFor(Milestone milestone, string areaName)
    {
        if (!milestone.Areas.TryGetValue(areaName, out var query))
        {
            return "bg-success";
        }

        return null;
    }

    private string BackgroundFor(int count)
    {
        return count == 0
            ? "bg-success"
            : null;
    }

    private string LinkFor(Milestone milestone)
    {
        var m = milestone.Name == IssuesByRepository.NoMilestone
            ? $"no%3Amilestone"
            : $"milestone%3A{milestone.Name}";
        return $"https://github.com/{Repository.Organization}/{Repository.Name}/issues?q=is%3Aopen+is%3Aissue+{m}";
    }

    private string LinkFor(Milestone milestone, string areaName)
    {
        var a = areaName == IssuesByRepository.NoArea
            ? $"-label%3A{string.Join("+-label%3A", Repository.AllAreas.Except(new[] {IssuesByRepository.NoArea}))}"
            : $"label%3A{areaName}";
        return $"{LinkFor(milestone)}+{a}";
    }

}
